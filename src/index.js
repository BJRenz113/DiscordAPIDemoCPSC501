require('dotenv').config(); //gives access to .env file in any related file

const { Client, IntentsBitField, EmbedBuilder, ChannelType } = require('discord.js'); //destructuring

const client = new Client({
    intents: [
        IntentsBitField.Flags.Guilds,
        IntentsBitField.Flags.GuildMembers,
        IntentsBitField.Flags.GuildMessages,
        IntentsBitField.Flags.MessageContent,
    ],
});

client.on('ready', () => {
    console.log('Bot is online!');
});

client.on('messageCreate', (message) => {
    if (message.author.bot) return;
    if (message.content === 'bot summoned') {
        message.reply('bot arrives');
    }
});

client.on('interactionCreate', async (interaction) => {
    if (!interaction.isChatInputCommand()) return; //safety that prevents the bot from talking to itself

    if (interaction.commandName === 'ping') {
        await interaction.reply('@here check voice channels');

    } else if (interaction.commandName === 'annoy') {
        await interaction.reply('@everyone womp womp');

    } else if (interaction.commandName === 'commands') {
        await interaction.reply(
            'bot summoned, /ping, /annoy, /eta, /send_embed, /create_channel, /roll_dice, /poll'
        );
    } else if (interaction.commandName === 'eta') {
        const hour = interaction.options.get('hour-digit').value;
        const minute = interaction.options.get('minute-digit').value.toString().padStart(2, '0'); //padstart ensures that the minutes digit always has two places
        const username = interaction.user.username;
        await interaction.reply(`${username} will be on at ${hour}:${minute} approximately.`);

    } else if (interaction.commandName === 'send_embed') { //many options with embeds, can very creative
        const embed = new EmbedBuilder()
            .setTitle('Inconspicuous Link')
            .setDescription('Inconspicuous description')
            .setURL('https://www.youtube.com/watch?v=dQw4w9WgXcQ&ab_channel=RickAstley')
            .setImage('https://design-assets.adobeprojectm.com/content/download/express/public/urn:aaid:sc:VA6C2:d3cbaa7f-778e-40c9-bc86-648ed96de7d7/component?assetType=TEMPLATE&etag=c29a699648e70b47e11fb83bc02c74c2&revision=0&component_id=eb8a75e1-3b34-4e59-8493-b12913163e4f')
            .setColor('Random') //also takes specific color codes here
            .setFooter({ text: 'Generated by the Bot' })
            .setTimestamp();
        await interaction.reply({ embeds: [embed] });

    } else if (interaction.commandName === 'create_channel') {
        const channelName = interaction.options.get('name').value;
        try {
            await interaction.guild.channels.create({
                name: channelName,
                type: ChannelType.GuildText,
            });
            await interaction.reply(`Channel ${channelName} created successfully.`);
        } catch (error) {
            await interaction.reply(`Failed to create channel: ${error.message}`);
        }

    } else if (interaction.commandName === 'roll_die') {
        const diceRoll = Math.floor(Math.random() * 6) + 1;
        await interaction.reply(`üé≤ You rolled a ${diceRoll}!`); //unicode emojis

    } else if (interaction.commandName === 'poll') {
        const question = interaction.options.get('question').value;
        const pollMessage = await interaction.reply({ content: `üìä ${question}`, fetchReply: true });
        await pollMessage.react('üëç');
        await pollMessage.react('üëé');
    }
});


//below are two methods for bringing the bot online
//the first is significantly less secure if you are pushing to github due to your token being leaked
//client.login("MTMwNDUyMDUwMzI3NjQ3MDMzMw.Gk77w0.3j60flndE-b0Q1BzcG3lfElHCWPmxxg0bjLNCg");

//this method uses .env and gitignore to prevent leaks, much better
client.login(process.env.DISCORD_TOKEN);